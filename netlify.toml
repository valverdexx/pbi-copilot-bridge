// netlify/functions/chat.js - VERS√ÉO SUPER SIMPLES PARA TESTE

exports.handler = async (event, context) => {
  // Headers CORS b√°sicos
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Content-Type': 'application/json'
  };

  // Resposta para preflight OPTIONS
  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  try {
    console.log('üî• FUN√á√ÉO ATIVADA!');
    console.log('M√©todo:', event.httpMethod);
    console.log('Query:', event.queryStringParameters);

    let question = 'Pergunta n√£o encontrada';
    let hasData = false;
    let rowCount = 0;

    // Extrai par√¢metros (GET ou POST)
    if (event.httpMethod === 'GET') {
      const params = event.queryStringParameters || {};
      question = decodeURIComponent(params.question || 'Sem pergunta');
      
      if (params.context) {
        try {
          const context = JSON.parse(decodeURIComponent(params.context));
          hasData = context.hasData || false;
          rowCount = context.rowCount || 0;
        } catch (e) {
          console.log('Erro ao parsear contexto:', e);
        }
      }
    }

    console.log('‚úÖ Pergunta extra√≠da:', question);
    console.log('‚úÖ Dados:', { hasData, rowCount });

    // Resposta simples e direta
    const answer = `üöÄ TESTE FUNCIONANDO! 
    
Sua pergunta: "${question}"
Dados dispon√≠veis: ${hasData ? 'SIM' : 'N√ÉO'}
Registros: ${rowCount}
Hor√°rio: ${new Date().toLocaleTimeString('pt-BR')}
M√©todo: ${event.httpMethod}

A comunica√ß√£o Power BI ‚Üî Netlify est√° OK!`;

    const response = {
      answer: answer,
      success: true,
      timestamp: new Date().toISOString(),
      debug: {
        method: event.httpMethod,
        hasContext: !!event.queryStringParameters?.context,
        questionLength: question.length
      }
    };

    console.log('üì§ Enviando resposta:', response);

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify(response)
    };

  } catch (error) {
    console.error('‚ùå ERRO:', error);
    
    return {
      statusCode: 200, // Sempre 200 para evitar bloqueios
      headers,
      body: JSON.stringify({
        answer: `‚ùå Erro na fun√ß√£o: ${error.message}`,
        success: false,
        error: true
      })
    };
  }
};